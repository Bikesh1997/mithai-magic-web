import React, {useRef, useState} from 'react';import Cropper from 'react-cropper';import 'cropperjs/dist/cropper.css';export default function ImageTools(){const [file,setFile]=useState(null);const [src,setSrc]=useState(null);const [croppedUrl,setCroppedUrl]=useState(null);const cropperRef=useRef(null);const [status,setStatus]=useState('');function onDrop(e){e.preventDefault();const f=e.dataTransfer.files[0];handleFile(f);}function onDragOver(e){e.preventDefault();}function handleFileInput(e){const f=e.target.files[0];handleFile(f);}function handleFile(f){if(!f) return;setFile(f);const reader=new FileReader();reader.onload=()=>setSrc(reader.result);reader.readAsDataURL(f);setCroppedUrl(null);setStatus('Ready');}async function convertToPng(){if(!file) return alert('Select file');const fd=new FormData();fd.append('image',file);setStatus('Converting to PNG...');const res=await fetch('/api/convert/jpg-to-png',{method:'POST',body:fd});if(res.ok){const blob=await res.blob();const url=URL.createObjectURL(blob);downloadBlob(url,'converted.png');setStatus('Converted');}else{setStatus('Error converting');}}function downloadBlob(url,name){const a=document.createElement('a');a.href=url;a.download=name;a.click();}async function cropServer(){if(!file) return alert('Select file');const cropper=cropperRef.current?.cropper;if(!cropper) return alert('No cropper');const rect=cropper.getData(true);const fd=new FormData();fd.append('image',file);fd.append('x',rect.x);fd.append('y',rect.y);fd.append('width',rect.width);fd.append('height',rect.height);setStatus('Cropping on server...');const res=await fetch('/api/image/crop',{method:'POST',body:fd});if(res.ok){const blob=await res.blob();const url=URL.createObjectURL(blob);downloadBlob(url,'cropped.png');setStatus('Cropped');}else{const j=await res.json();setStatus('Error: '+(j.error||''));}}async function removeBg(){if(!file) return alert('Select file');setStatus('Removing background...');const fd=new FormData();fd.append('image',file);const res=await fetch('/api/image/remove-bg',{method:'POST',body:fd});if(res.ok){const blob=await res.blob();const url=URL.createObjectURL(blob);downloadBlob(url,'no-bg.png');setStatus('Background removed');}else{const j=await res.json();setStatus('Error: '+(j.error||''));}}function cropClient(){const cropper=cropperRef.current?.cropper;if(!cropper) return;const canvas=cropper.getCroppedCanvas();if(!canvas) return;const url=canvas.toDataURL('image/png');setCroppedUrl(url);downloadBlob(url,'cropped-client.png');}return (<div><h2>Image Tools</h2><div className='card' onDrop={onDrop} onDragOver={onDragOver} style={{padding:20}}><div className='muted'>Drag & drop an image here, or</div><input type='file' accept='image/*' onChange={handleFileInput} />{src && <div style={{marginTop:12}}><div style={{display:'flex',gap:12}}><div style={{flex:1}}><h4>Preview</h4><img src={src} alt='preview' className='preview' /></div><div style={{flex:1}}><h4>Cropper</h4><Cropper src={src} style={{height:300,width:'100%'}} initialAspectRatio={16/9} guides ref={cropperRef} viewMode={1} /><div style={{marginTop:8}}><button className='btn' onClick={cropClient}>Crop (Client)</button><button className='btn' onClick={cropServer} style={{marginLeft:8}}>Crop (Server)</button></div></div></div><div style={{marginTop:12}}><button className='btn' onClick={convertToPng}>Convert to PNG</button><button className='btn' onClick={removeBg} style={{marginLeft:8}}>Remove Background</button></div>{croppedUrl && <div style={{marginTop:12}}><h4>Cropped (client)</h4><img src={croppedUrl} className='preview' /></div>}</div>}</div><div style={{marginTop:12}}>Status: {status}</div></div>)}